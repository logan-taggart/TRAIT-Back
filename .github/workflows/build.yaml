name: Build and Release Executables

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.9"

      - name: Create virtual environment
        run: python -m venv venv
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          .\venv\Scripts\python -m pip install --upgrade pip
          .\venv\Scripts\pip install numpy
          .\venv\Scripts\pip install -r requirements.txt
          .\venv\Scripts\pip install pyinstaller
        shell: cmd

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          ./venv/bin/pip install --upgrade pip
          ./venv/bin/pip install numpy
          ./venv/bin/pip install -r requirements.txt
          ./venv/bin/pip install pyinstaller
        shell: bash

      - name: Build executable (Windows)
        if: runner.os == 'Windows'
        env: 
          PYINSTALLER_NO_PLUGIN: "1"
        run: |
          .\venv\Scripts\pyinstaller --onedir --windowed --name backend run.py --add-data "models/logo_detection.pt;models" --exclude-module tkinter
        shell: cmd

      - name: Build executable (macOS)
        if: runner.os == 'macOS'
        env: 
          PYINSTALLER_NO_PLUGIN: "1"
        run: |
          arch -x86_64 ./venv/bin/pyinstaller --onedir --windowed --name backend run.py --add-data "models/logo_detection.pt:models" --exclude-module tkinter
        shell: bash

      - name: Zip build output (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path dist/backend -DestinationPath backend-windows.zip
        shell: pwsh

      - name: Zip build output (macOS)
        if: runner.os == 'macOS'
        run: cd dist && zip -r ../backend-mac-x86_64.zip backend
        shell: bash

      - name: Upload zipped artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.os }}
          path: |
            backend-windows.zip
            backend-mac-x86_64.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all zipped artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.run_id }}
          tag_name: release-${{ github.run_id }}
          body: "Automated release for commit `${{ github.sha }}`"
          files: release-artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}