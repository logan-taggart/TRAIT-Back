name: Build and Release with Docker
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            name: backend-linux
          - os: ubuntu-latest  
            platform: linux/amd64
            name: backend-windows
            target: windows
          - os: macos-13
            platform: darwin/amd64
            name: backend-macos

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx (Linux/Windows)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-buildx-action@v3
      
      - name: Build with Docker (Linux/Windows)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Create Dockerfile for cross-platform builds
          cat > Dockerfile << 'EOF'
          FROM python:3.12-slim
          
          WORKDIR /app
          COPY . .
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              && rm -rf /var/lib/apt/lists/*
          
          # Set OpenMP environment
          ENV KMP_DUPLICATE_LIB_OK=TRUE
          
          # Install Python dependencies
          RUN pip install --no-cache-dir torch torchvision --index-url https://download.pytorch.org/whl/cpu
          RUN pip install --no-cache-dir -r requirements.txt pyinstaller
          
          # Build executable
          RUN pyinstaller --onedir --name backend run.py \
              --add-data "models/logo_detection.pt:models" \
              --exclude-module tkinter
          
          CMD ["cp", "-r", "dist/backend", "/output/"]
          EOF
          
          # Build and extract
          docker build -t backend-builder .
          docker create --name temp-container backend-builder
          docker cp temp-container:/app/dist/backend ./backend-${{ matrix.name }}
          docker rm temp-container
          
          # Create archive
          tar -czf ${{ matrix.name }}.tar.gz backend-${{ matrix.name }}
      
      - name: Build natively (macOS)
        if: matrix.os == 'macos-13'
        run: |
          export KMP_DUPLICATE_LIB_OK=TRUE
          python -m pip install --upgrade pip
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
          pip install -r requirements.txt pyinstaller
          
          pyinstaller --onedir --name backend run.py \
            --add-data "models/logo_detection.pt:models" \
            --exclude-module tkinter
          
          tar -czf ${{ matrix.name }}.tar.gz -C dist backend
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.run_id }}
          tag_name: release-${{ github.run_id }}
          files: artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
